// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"layout/internal/biz"
	"layout/internal/conf"
	"layout/internal/data"
	"layout/internal/server"
	"layout/internal/service"
	"layout/pkg/datasource"
	"layout/pkg/monitor"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(contextContext context.Context, bootstrap *conf.Bootstrap, confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	textMapPropagator := monitor.NewTextMapPropagator()
	tracerProvider, err := monitor.NewTracerProvider(contextContext, bootstrap, textMapPropagator)
	if err != nil {
		return nil, nil, err
	}
	gorm, err := datasource.NewGorm(confData, logger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	mongo, err := datasource.NewMongo(contextContext, confData, logger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	nats, err := datasource.NewNats(confData, logger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	redis, err := datasource.NewRedis(confData, logger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	dataData, err := data.NewData(confData, gorm, mongo, nats, redis, logger, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	tracer, err := monitor.NewTracer(bootstrap, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	usersRepo, err := data.NewUsersRepo(dataData, logger, tracer)
	if err != nil {
		return nil, nil, err
	}
	usersUsecase := biz.NewUsersUsecase(usersRepo, logger)
	usersService := service.NewUsersService(usersUsecase, logger)
	productsRepo, err := data.NewProductsRepo(dataData, logger, tracer)
	if err != nil {
		return nil, nil, err
	}
	productsUsecase := biz.NewProductsUsecase(productsRepo, logger)
	productsService := service.NewProductsService(productsUsecase, logger)
	meterProvider, err := monitor.NewMeterProvider(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	meter, err := monitor.NewMeter(bootstrap, meterProvider)
	if err != nil {
		return nil, nil, err
	}
	grpcServer, err := server.NewGRPCServer(confServer, usersService, productsService, logger, meter, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	httpServer, err := server.NewHTTPServer(confServer, usersService, productsService, logger, meter, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
	}, nil
}
